diff -pruN cv2pdb-5c63d48.orig/src/Makefile.mingw cv2pdb-5c63d48/src/Makefile.mingw
--- cv2pdb-5c63d48.orig/src/Makefile.mingw	1969-12-31 19:00:00 -0500
+++ cv2pdb-5c63d48/src/Makefile.mingw	2016-01-15 10:28:42 -0500
@@ -0,0 +1,25 @@
+TARGET = cv2pdb.exe
+
+#CFLAGS =
+
+OBJS = PEImage.o \
+       cv2pdb.o \
+       cvutil.o \
+       demangle.o \
+       dwarf2pdb.o \
+       dwarflines.o \
+       main.o \
+       mspdb.o \
+       readDwarf.o \
+       symutil.o
+
+all: $(TARGET)
+
+$(TARGET): $(OBJS)
+	$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS) 
+
+%.o:%.cpp
+	$(CXX) $(CFLAGS) -c $< -o $@
+
+clean:
+	rm -f $(OBJS) $(TARGET)
diff -pruN cv2pdb-5c63d48.orig/src/cv2pdb.cpp cv2pdb-5c63d48/src/cv2pdb.cpp
--- cv2pdb-5c63d48.orig/src/cv2pdb.cpp	2015-10-08 03:37:41 -0400
+++ cv2pdb-5c63d48/src/cv2pdb.cpp	2016-01-15 10:28:42 -0500
@@ -11,6 +11,7 @@
 
 #include <stdio.h>
 #include <direct.h>
+#include <climits>
 
 #define REMOVE_LF_DERIVED  1  // types wrong by DMD
 #define PRINT_INTERFACEVERSON 0
@@ -1498,9 +1499,9 @@ const char* CV2PDB::appendAssocArray(int
 	char keyname[kMaxNameLen];
 	char elemname[kMaxNameLen];
 	if(!nameOfType(keyType, keyname, sizeof(keyname)))
-		return false;
+		return NULL;
 	if(!nameOfType(elemType, elemname, sizeof(elemname)))
-		return false;
+		return NULL;
 
 	sprintf(name, "internal@aaA<%s,%s>", keyname, elemname);
 
diff -pruN cv2pdb-5c63d48.orig/src/demangle.cpp cv2pdb-5c63d48/src/demangle.cpp
--- cv2pdb-5c63d48.orig/src/demangle.cpp	2015-10-08 03:37:41 -0400
+++ cv2pdb-5c63d48/src/demangle.cpp	2016-01-15 10:28:42 -0500
@@ -12,6 +12,8 @@
  *	Frits van Bommel
  */
 
+#include <stdio.h>
+
 #include <string>
 #include <ctype.h>
 #include <assert.h>
@@ -465,10 +467,17 @@ public:
 #ifdef _M_X64
 		cvt80to64(rdata, &r);
 #else
+#if 0
 		__asm {
 			fld TBYTE PTR rdata;
 			fstp r;
 		}
+#else
+                asm ("fld %1    \n"
+                     "fstp %0   \n"
+                     : "=m" (r)
+                     : "m" (rdata[0]));
+#endif
 #endif
 
 		char num[30];
diff -pruN cv2pdb-5c63d48.orig/src/dwarf2pdb.cpp cv2pdb-5c63d48/src/dwarf2pdb.cpp
--- cv2pdb-5c63d48.orig/src/dwarf2pdb.cpp	2015-10-08 03:37:41 -0400
+++ cv2pdb-5c63d48/src/dwarf2pdb.cpp	2016-01-15 10:40:56 -0500
@@ -29,8 +29,7 @@ void CV2PDB::checkDWARFTypeAlloc(int siz
 		//allocDwarfTypes += size + add;
 		allocDwarfTypes += allocDwarfTypes/2 + size + add;
 		dwarfTypes = (BYTE*) realloc(dwarfTypes, allocDwarfTypes);
-		if (dwarfTypes == nullptr)
-			__debugbreak();
+		assert (dwarfTypes != nullptr);
 	}
 }
 
diff -pruN cv2pdb-5c63d48.orig/src/main.cpp cv2pdb-5c63d48/src/main.cpp
--- cv2pdb-5c63d48.orig/src/main.cpp	2015-10-08 03:37:41 -0400
+++ cv2pdb-5c63d48/src/main.cpp	2016-01-15 10:28:42 -0500
@@ -9,6 +9,9 @@
 #include "symutil.h"
 
 #include <direct.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <ctype.h>
 
 double
 #include "../VERSION"
diff -pruN cv2pdb-5c63d48.orig/src/mspdb.cpp cv2pdb-5c63d48/src/mspdb.cpp
--- cv2pdb-5c63d48.orig/src/mspdb.cpp	2015-10-08 03:37:41 -0400
+++ cv2pdb-5c63d48/src/mspdb.cpp	2016-01-15 10:28:42 -0500
@@ -13,12 +13,12 @@
 HMODULE modMsPdb;
 mspdb::fnPDBOpen2W *pPDBOpen2W;
 
-char* mspdb80_dll = "mspdb80.dll";
-char* mspdb100_dll = "mspdb100.dll";
-char* mspdb110_dll = "mspdb110.dll";
-char* mspdb120_dll = "mspdb120.dll";
-char* mspdb140_dll = "mspdb140.dll";
-// char* mspdb110shell_dll = "mspdbst.dll"; // the VS 2012 Shell uses this file instead of mspdb110.dll, but is missing mspdbsrv.exe
+const char* mspdb80_dll = "mspdb80.dll";
+const char* mspdb100_dll = "mspdb100.dll";
+const char* mspdb110_dll = "mspdb110.dll";
+const char* mspdb120_dll = "mspdb120.dll";
+const char* mspdb140_dll = "mspdb140.dll";
+// const char* mspdb110shell_dll = "mspdbst.dll"; // the VS 2012 Shell uses this file instead of mspdb110.dll, but is missing mspdbsrv.exe
 
 int mspdb::vsVersion = 8;
 
diff -pruN cv2pdb-5c63d48.orig/src/mspdb.h cv2pdb-5c63d48/src/mspdb.h
--- cv2pdb-5c63d48.orig/src/mspdb.h	2015-10-08 03:37:41 -0400
+++ cv2pdb-5c63d48/src/mspdb.h	2016-01-15 10:28:42 -0500
@@ -7,6 +7,7 @@
 #ifndef __MSPDB_H__
 #define __MSPDB_H__
 
+#include <windows.h> // GUID
 #include <stdio.h>
 
 namespace mspdb
@@ -37,6 +38,14 @@ struct IPI;
 struct NameMap;
 struct EnumNameMap;
 
+enum EnumType { };
+enum DEPON { };
+enum YNM { };
+enum TrgType { };
+enum PCC { };
+enum DBGTYPE { };
+enum DOVC { };
+
 #define MRECmp MRECmp2
 #define PDBCommon PDB
 #define SrcCommon Src
@@ -61,137 +70,137 @@ extern int vsVersion;
 */
 
 struct MREUtil {
-public: virtual int MREUtil::FRelease(void);
-public: virtual void MREUtil::EnumSrcFiles(int (__stdcall*)(struct MREUtil *,struct EnumFile &,enum EnumType),unsigned short const *,void *);
-public: virtual void MREUtil::EnumDepFiles(struct EnumFile &,int (__stdcall*)(struct MREUtil *,struct EnumFile &,enum EnumType));
-public: virtual void MREUtil::EnumAllFiles(int (__stdcall*)(struct MREUtil *,struct EnumFile &),unsigned short const *,void *);
-public: virtual void MREUtil::Enumstructes(int (__stdcall*)(struct MREUtil *,struct Enumstruct &),unsigned short const *,void *);
-public: virtual void MREUtil::SummaryStats(struct MreStats &);
+public: virtual int FRelease(void);
+public: virtual void EnumSrcFiles(int (__stdcall*)(struct MREUtil *,struct EnumFile &,enum EnumType),unsigned short const *,void *);
+public: virtual void EnumDepFiles(struct EnumFile &,int (__stdcall*)(struct MREUtil *,struct EnumFile &,enum EnumType));
+public: virtual void EnumAllFiles(int (__stdcall*)(struct MREUtil *,struct EnumFile &),unsigned short const *,void *);
+public: virtual void Enumstructes(int (__stdcall*)(struct MREUtil *,struct Enumstruct &),unsigned short const *,void *);
+public: virtual void SummaryStats(struct MreStats &);
 };
 
 struct MREFile {
-public: virtual int MREFile::FOpenBag(struct MREBag * *,unsigned long);
-public: virtual int MREFile::FnoteEndInclude(unsigned long);
-public: virtual int MREFile::FnotestructMod(unsigned long,unsigned long);
-public: virtual int MREFile::FnoteInlineMethodMod(unsigned long,char const *,unsigned long);
-public: virtual int MREFile::FnoteLineDelta(unsigned long,int);
-public: virtual void MREFile::EnumerateChangedstructes(int (__cdecl*)(unsigned long,struct MREFile *,int (MREFile::*)(unsigned long,unsigned long)));
-public: virtual int MREFile::FnotestructTI(unsigned long,unsigned long);
-public: virtual int MREFile::FIsBoring(void);
-public: virtual int MREFile::FnotePchCreateUse(unsigned short const *,unsigned short const *);
+public: virtual int FOpenBag(struct MREBag * *,unsigned long);
+public: virtual int FnoteEndInclude(unsigned long);
+public: virtual int FnotestructMod(unsigned long,unsigned long);
+public: virtual int FnoteInlineMethodMod(unsigned long,char const *,unsigned long);
+public: virtual int FnoteLineDelta(unsigned long,int);
+public: virtual void EnumerateChangedstructes(int (__cdecl*)(unsigned long,struct MREFile *,int (*)(unsigned long,unsigned long)));
+public: virtual int FnotestructTI(unsigned long,unsigned long);
+public: virtual int FIsBoring(void);
+public: virtual int FnotePchCreateUse(unsigned short const *,unsigned short const *);
 };
 
 struct MREBag {
-public: virtual int MREBag::FAddDep(unsigned long,unsigned long,char const *,enum DEPON,unsigned long);
-public: virtual int MREBag::FClose(void);
+public: virtual int FAddDep(unsigned long,unsigned long,char const *,enum DEPON,unsigned long);
+public: virtual int FClose(void);
 };
 
 struct BufferDefaultAllocator {
-public: virtual unsigned char * BufferDefaultAllocator::Alloc(long);
-public: virtual unsigned char * BufferDefaultAllocator::AllocZeroed(long);
-public: virtual void BufferDefaultAllocator::DeAlloc(unsigned char *);
+public: virtual unsigned char * Alloc(long);
+public: virtual unsigned char * AllocZeroed(long);
+public: virtual void DeAlloc(unsigned char *);
 };
 
 
 struct EnumSC {
-public: virtual int EnumSC::next(void);
-public: virtual void EnumSC::get(unsigned short *,unsigned short *,long *,long *,unsigned long *);
-public: virtual void EnumSC::getCrcs(unsigned long *,unsigned long *);
-public: virtual bool EnumSC::fUpdate(long,long);
-public: virtual int EnumSC::prev(void);
-public: virtual int EnumSC::clone(struct EnumContrib * *);
-public: virtual int EnumSC::locate(long,long);
+public: virtual int next(void);
+public: virtual void get(unsigned short *,unsigned short *,long *,long *,unsigned long *);
+public: virtual void getCrcs(unsigned long *,unsigned long *);
+public: virtual bool fUpdate(long,long);
+public: virtual int prev(void);
+public: virtual int clone(struct EnumContrib * *);
+public: virtual int locate(long,long);
 };
 
 struct Stream {
-public: virtual long Stream::QueryCb(void);
-public: virtual int Stream::Read(long,void *,long *);
-public: virtual int Stream::Write(long,void *,long);
-public: virtual int Stream::Replace(void *,long);
-public: virtual int Stream::Append(void *,long);
-public: virtual int Stream::Delete(void);
-public: virtual int Stream::Release(void);
-public: virtual int Stream::Read2(long,void *,long);
-public: virtual int Stream::Truncate(long);
+public: virtual long QueryCb(void);
+public: virtual int Read(long,void *,long *);
+public: virtual int Write(long,void *,long);
+public: virtual int Replace(void *,long);
+public: virtual int Append(void *,long);
+public: virtual int Delete(void);
+public: virtual int Release(void);
+public: virtual int Read2(long,void *,long);
+public: virtual int Truncate(long);
 };
 
 struct EnumThunk {
-public: virtual void EnumThunk::release(void);
-public: virtual void EnumThunk::reset(void);
-public: virtual int EnumThunk::next(void);
-public: virtual void EnumThunk::get(unsigned short *,long *,long *);
+public: virtual void release(void);
+public: virtual void reset(void);
+public: virtual int next(void);
+public: virtual void get(unsigned short *,long *,long *);
 };
 
 struct EnumSyms {
-public: virtual void EnumSyms::release(void);
-public: virtual void EnumSyms::reset(void);
-public: virtual int EnumSyms::next(void);
-public: virtual void EnumSyms::get(unsigned char * *);
-public: virtual int EnumSyms::prev(void);
-public: virtual int EnumSyms::clone(struct EnumSyms * *);
-public: virtual int EnumSyms::locate(long,long);
+public: virtual void release(void);
+public: virtual void reset(void);
+public: virtual int next(void);
+public: virtual void get(unsigned char * *);
+public: virtual int prev(void);
+public: virtual int clone(struct EnumSyms * *);
+public: virtual int locate(long,long);
 };
 
 struct EnumLines {
-public: virtual void EnumLines::release(void);
-public: virtual void EnumLines::reset(void);
-public: virtual int EnumLines::next(void);
-public: virtual bool EnumLines::getLines(unsigned long *,unsigned long *,unsigned short *,unsigned long *,unsigned long *,struct CV_Line_t *);
-public: virtual bool EnumLines::getLinesColumns(unsigned long *,unsigned long *,unsigned short *,unsigned long *,unsigned long *,struct CV_Line_t *,struct CV_Column_t *);
-public: virtual bool EnumLines::clone(struct EnumLines * *);
+public: virtual void release(void);
+public: virtual void reset(void);
+public: virtual int next(void);
+public: virtual bool getLines(unsigned long *,unsigned long *,unsigned short *,unsigned long *,unsigned long *,struct CV_Line_t *);
+public: virtual bool getLinesColumns(unsigned long *,unsigned long *,unsigned short *,unsigned long *,unsigned long *,struct CV_Line_t *,struct CV_Column_t *);
+public: virtual bool clone(struct EnumLines * *);
 };
 
 struct Dbg {
-public: virtual int Dbg::Close(void);
-public: virtual long Dbg::QuerySize(void);
-public: virtual void Dbg::Reset(void);
-public: virtual int Dbg::Skip(unsigned long);
-public: virtual int Dbg::QueryNext(unsigned long,void *);
-public: virtual int Dbg::Find(void *);
-public: virtual int Dbg::Clear(void);
-public: virtual int Dbg::Append(unsigned long,void const *);
-public: virtual int Dbg::ReplaceNext(unsigned long,void const *);
-public: virtual int Dbg::Clone(struct Dbg * *);
-public: virtual long Dbg::QueryElementSize(void);
+public: virtual int Close(void);
+public: virtual long QuerySize(void);
+public: virtual void Reset(void);
+public: virtual int Skip(unsigned long);
+public: virtual int QueryNext(unsigned long,void *);
+public: virtual int Find(void *);
+public: virtual int Clear(void);
+public: virtual int Append(unsigned long,void const *);
+public: virtual int ReplaceNext(unsigned long,void const *);
+public: virtual int Clone(struct Dbg * *);
+public: virtual long QueryElementSize(void);
 };
 
 struct EnumSrc {
-public: virtual void EnumSrc::release(void);
-public: virtual void EnumSrc::reset(void);
-public: virtual int EnumSrc::next(void);
-public: virtual void EnumSrc::get(struct SrcHeaderOut const * *);
+public: virtual void release(void);
+public: virtual void reset(void);
+public: virtual int next(void);
+public: virtual void get(struct SrcHeaderOut const * *);
 };
 
 struct MREDrv {
-public: virtual int MREDrv::FRelease(void);
-public: virtual int MREDrv::FRefreshFileSysInfo(void);
-public: virtual int MREDrv::FSuccessfulCompile(int,unsigned short const *,unsigned short const *);
-public: virtual enum YNM MREDrv::YnmFileOutOfDate(struct SRCTARG &);
-public: virtual int MREDrv::FFilesOutOfDate(struct CAList *);
-public: virtual int MREDrv::FUpdateTargetFile(unsigned short const *,enum TrgType);
-public: virtual void MREDrv::OneTimeInit(void);
+public: virtual int FRelease(void);
+public: virtual int FRefreshFileSysInfo(void);
+public: virtual int FSuccessfulCompile(int,unsigned short const *,unsigned short const *);
+public: virtual enum YNM YnmFileOutOfDate(struct SRCTARG &);
+public: virtual int FFilesOutOfDate(struct CAList *);
+public: virtual int FUpdateTargetFile(unsigned short const *,enum TrgType);
+public: virtual void OneTimeInit(void);
 };
 
 struct MREngine {
-public: virtual int MREngine::FDelete(void);
-public: virtual int MREngine::FClose(int);
-public: virtual void MREngine::QueryPdbApi(struct PDB * &,struct NameMap * &);
-public: virtual void MREngine::_Reserved_was_QueryMreLog(void);
-public: virtual void MREngine::QueryMreDrv(struct MREDrv * &);
-public: virtual void MREngine::QueryMreCmp(struct MRECmp * &,struct TPI *);
-public: virtual void MREngine::QueryMreUtil(struct MREUtil * &);
-public: virtual int MREngine::FCommit(void);
+public: virtual int FDelete(void);
+public: virtual int FClose(int);
+public: virtual void QueryPdbApi(struct PDB * &,struct NameMap * &);
+public: virtual void _Reserved_was_QueryMreLog(void);
+public: virtual void QueryMreDrv(struct MREDrv * &);
+public: virtual void QueryMreCmp(struct MRECmp * &,struct TPI *);
+public: virtual void QueryMreUtil(struct MREUtil * &);
+public: virtual int FCommit(void);
 };
 
 struct MRECmp2 {
-public: virtual int MRECmp2::FRelease(void);
-public: virtual int MRECmp2::FOpenCompiland(struct MREFile * *,unsigned short const *,unsigned short const *);
-public: virtual int MRECmp2::FCloseCompiland(struct MREFile *,int);
-public: virtual int MRECmp2::FPushFile(struct MREFile * *,unsigned short const *,void *);
-public: virtual struct MREFile * MRECmp2::PmrefilePopFile(void);
-public: virtual int MRECmp::FStoreDepData(struct DepData *);
-public: virtual int MRECmp::FRestoreDepData(struct DepData *);
-public: virtual void MRECmp::structIsBoring(unsigned long);
+public: virtual int FRelease(void);
+public: virtual int FOpenCompiland(struct MREFile * *,unsigned short const *,unsigned short const *);
+public: virtual int FCloseCompiland(struct MREFile *,int);
+public: virtual int FPushFile(struct MREFile * *,unsigned short const *,void *);
+public: virtual struct MREFile * PmrefilePopFile(void);
+public: virtual int FStoreDepData(struct DepData *);
+public: virtual int FRestoreDepData(struct DepData *);
+public: virtual void structIsBoring(unsigned long);
 };
 
 //public: virtual void * Pool<16384>::AllocBytes(unsigned int);
@@ -231,7 +240,7 @@ public: virtual int CopyTo(char const *,
 public: virtual int OpenSrc(struct Src * *);
 public: virtual long QueryLastErrorExW(unsigned short *,unsigned int);
 public: virtual unsigned short * QueryPDBNameExW(unsigned short *,unsigned int);
-public: virtual int QuerySignature2(struct _GUID *);
+public: virtual int QuerySignature2(GUID *);
 public: virtual int CopyToW(unsigned short const *,unsigned long,unsigned long);
 public: virtual int fIsSZPDB(void)const ;
 public: virtual int containsW(unsigned short const *,unsigned long *);
@@ -249,42 +258,42 @@ struct PDB
 public: 
 	static int __cdecl Open2W(unsigned short const *path,char const *mode,long *p,unsigned short *ext,unsigned int flags,struct PDB **pPDB);
 
-	unsigned long QueryAge() { return vs10.QueryAge(); }
-	int CreateDBI(char const *n,struct DBI * *pdbi) { return vs10.CreateDBI(n, pdbi); }
-	int OpenTpi(char const *n,struct TPI * *ptpi)  { return vs10.OpenTpi(n, ptpi); }
-	long QueryLastError(char * const lastErr) { return vs10.QueryLastError(lastErr); }
+	unsigned long QueryAge() { PDB_VS10 *p = &vs10; return p->QueryAge(); }
+	int CreateDBI(char const *n,struct DBI * *pdbi) { PDB_VS10 *p = &vs10; return p->CreateDBI(n, pdbi); }
+	int OpenTpi(char const *n,struct TPI * *ptpi)  { PDB_VS10 *p = &vs10; return p->OpenTpi(n, ptpi); }
+	long QueryLastError(char * const lastErr) { PDB_VS10 *p = &vs10; return p->QueryLastError(lastErr); }
 
 	int Commit()
 	{
 		if(vsVersion >= 11)
 			return ((PDB_VS11*)&vs10)->Commit();
-		return vs10.Commit();
+		PDB_VS10 *p = &vs10; return p->Commit();
 	}
 	int Close()
 	{
 		if(vsVersion >= 11)
 			return ((PDB_VS11*)&vs10)->Close();
-		return vs10.Close();
+		PDB_VS10 *p = &vs10; return p->Close();
 	}
-	int QuerySignature2(struct _GUID *guid)
+	int QuerySignature2(GUID *guid)
 	{
 		if(vsVersion >= 11)
 			return ((PDB_VS11*)&vs10)->QuerySignature2(guid);
-		return vs10.QuerySignature2(guid);
+		PDB_VS10 *p = &vs10; return p->QuerySignature2(guid);
 	}
 };
 
 struct Src {
-public: virtual bool Src::Close(void);
-public: virtual bool SrcCommon::Add(struct SrcHeader const *,void const *);
-public: virtual bool Src::Remove(char const *);
-public: virtual bool SrcCommon::QueryByName(char const *,struct SrcHeaderOut *)const ;
-public: virtual bool Src::GetData(struct SrcHeaderOut const *,void *)const ;
-public: virtual bool Src::GetEnum(struct EnumSrc * *)const ;
-public: virtual bool Src::GetHeaderBlock(struct SrcHeaderBlock &)const ;
-public: virtual bool Src::RemoveW(unsigned short *);
-public: virtual bool Src::QueryByNameW(unsigned short *,struct SrcHeaderOut *)const ;
-public: virtual bool Src::AddW(struct SrcHeaderW const *,void const *);
+public: virtual bool Close(void);
+public: virtual bool Add(struct SrcHeader const *,void const *);
+public: virtual bool Remove(char const *);
+public: virtual bool QueryByName(char const *,struct SrcHeaderOut *)const ;
+public: virtual bool GetData(struct SrcHeaderOut const *,void *)const ;
+public: virtual bool GetEnum(struct EnumSrc * *)const ;
+public: virtual bool GetHeaderBlock(struct SrcHeaderBlock &)const ;
+public: virtual bool RemoveW(unsigned short *);
+public: virtual bool QueryByNameW(unsigned short *,struct SrcHeaderOut *)const ;
+public: virtual bool AddW(struct SrcHeaderW const *,void const *);
 };
 
 #include "pshpack1.h"
@@ -325,15 +334,19 @@ struct TypeChunk
 	unsigned short len;
 	unsigned short type;
 
+#if 0 /* an anonymous union can only have non-static data members */
 	union
 	{
+#endif
 		struct _refpdb // type 0x1515
 		{
 			unsigned int md5[4];
 			unsigned int unknown;
 			unsigned pdbname[1];
 		} refpdb;
+#if 0
 	};
+#endif
 };
 
 struct TypeData
@@ -345,44 +358,44 @@ struct TypeData
 #include "poppack.h"
 
 struct Mod {
-public: virtual unsigned long Mod::QueryInterfaceVersion(void);
-public: virtual unsigned long Mod::QueryImplementationVersion(void);
-public: virtual int Mod::AddTypes(unsigned char *pTypeData,long cbTypeData);
-public: virtual int Mod::AddSymbols(unsigned char *pSymbolData,long cbSymbolData);
-public: virtual int Mod2::AddPublic(char const *,unsigned short,long); // forwards to AddPublic2(...,0)
-public: virtual int ModCommon::AddLines(char const *fname,unsigned short sec,long off,long size,long off2,unsigned short firstline,unsigned char *pLineInfo,long cbLineInfo); // forwards to AddLinesW
-public: virtual int Mod2::AddSecContrib(unsigned short sec,long off,long size,unsigned long secflags); // forwards to Mod2::AddSecContribEx(..., 0, 0)
-public: virtual int ModCommon::QueryCBName(long *);
-public: virtual int ModCommon::QueryName(char * const,long *);
-public: virtual int Mod::QuerySymbols(unsigned char *,long *);
-public: virtual int Mod::QueryLines(unsigned char *,long *);
-public: virtual int Mod2::SetPvClient(void *);
-public: virtual int Mod2::GetPvClient(void * *);
-public: virtual int Mod2::QueryFirstCodeSecContrib(unsigned short *,long *,long *,unsigned long *);
-public: virtual int Mod2::QueryImod(unsigned short *);
-public: virtual int Mod2::QueryDBI(struct DBI * *);
-public: virtual int Mod2::Close(void);
-public: virtual int ModCommon::QueryCBFile(long *);
-public: virtual int ModCommon::QueryFile(char * const,long *);
-public: virtual int Mod::QueryTpi(struct TPI * *);
-public: virtual int Mod2::AddSecContribEx(unsigned short sec,long off,long size,unsigned long secflags,unsigned long crc/*???*/,unsigned long);
-public: virtual int Mod::QueryItsm(unsigned short *);
-public: virtual int ModCommon::QuerySrcFile(char * const,long *);
-public: virtual int Mod::QuerySupportsEC(void);
-public: virtual int ModCommon::QueryPdbFile(char * const,long *);
-public: virtual int Mod::ReplaceLines(unsigned char *,long);
-public: virtual bool Mod::GetEnumLines(struct EnumLines * *);
-public: virtual bool Mod::QueryLineFlags(unsigned long *);
-public: virtual bool Mod::QueryFileNameInfo(unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned char *,unsigned long *);
-public: virtual int Mod::AddPublicW(unsigned short const *,unsigned short,long,unsigned long);
-public: virtual int Mod::AddLinesW(unsigned short const *fname,unsigned short sec,long off,long size,long off2,unsigned long firstline,unsigned char *plineInfo,long cbLineInfo);
-public: virtual int Mod::QueryNameW(unsigned short * const,long *);
-public: virtual int Mod::QueryFileW(unsigned short * const,long *);
-public: virtual int Mod::QuerySrcFileW(unsigned short * const,long *);
-public: virtual int Mod::QueryPdbFileW(unsigned short * const,long *);
-public: virtual int Mod2::AddPublic2(char const *name,unsigned short sec,long off,unsigned long type);
-public: virtual int Mod::InsertLines(unsigned char *,long);
-public: virtual int Mod::QueryLines2(long,unsigned char *,long *);
+public: virtual unsigned long QueryInterfaceVersion(void);
+public: virtual unsigned long QueryImplementationVersion(void);
+public: virtual int AddTypes(unsigned char *pTypeData,long cbTypeData);
+public: virtual int AddSymbols(unsigned char *pSymbolData,long cbSymbolData);
+public: virtual int AddPublic(char const *,unsigned short,long); // forwards to AddPublic2(...,0)
+public: virtual int AddLines(char const *fname,unsigned short sec,long off,long size,long off2,unsigned short firstline,unsigned char *pLineInfo,long cbLineInfo); // forwards to AddLinesW
+public: virtual int AddSecContrib(unsigned short sec,long off,long size,unsigned long secflags); // forwards to AddSecContribEx(..., 0, 0)
+public: virtual int QueryCBName(long *);
+public: virtual int QueryName(char * const,long *);
+public: virtual int QuerySymbols(unsigned char *,long *);
+public: virtual int QueryLines(unsigned char *,long *);
+public: virtual int SetPvClient(void *);
+public: virtual int GetPvClient(void * *);
+public: virtual int QueryFirstCodeSecContrib(unsigned short *,long *,long *,unsigned long *);
+public: virtual int QueryImod(unsigned short *);
+public: virtual int QueryDBI(struct DBI * *);
+public: virtual int Close(void);
+public: virtual int QueryCBFile(long *);
+public: virtual int QueryFile(char * const,long *);
+public: virtual int QueryTpi(struct TPI * *);
+public: virtual int AddSecContribEx(unsigned short sec,long off,long size,unsigned long secflags,unsigned long crc/*???*/,unsigned long);
+public: virtual int QueryItsm(unsigned short *);
+public: virtual int QuerySrcFile(char * const,long *);
+public: virtual int QuerySupportsEC(void);
+public: virtual int QueryPdbFile(char * const,long *);
+public: virtual int ReplaceLines(unsigned char *,long);
+public: virtual bool GetEnumLines(struct EnumLines * *);
+public: virtual bool QueryLineFlags(unsigned long *);
+public: virtual bool QueryFileNameInfo(unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned char *,unsigned long *);
+public: virtual int AddPublicW(unsigned short const *,unsigned short,long,unsigned long);
+public: virtual int AddLinesW(unsigned short const *fname,unsigned short sec,long off,long size,long off2,unsigned long firstline,unsigned char *plineInfo,long cbLineInfo);
+public: virtual int QueryNameW(unsigned short * const,long *);
+public: virtual int QueryFileW(unsigned short * const,long *);
+public: virtual int QuerySrcFileW(unsigned short * const,long *);
+public: virtual int QueryPdbFileW(unsigned short * const,long *);
+public: virtual int AddPublic2(char const *name,unsigned short sec,long off,unsigned long type);
+public: virtual int InsertLines(unsigned char *,long);
+public: virtual int QueryLines2(long,unsigned char *,long *);
 };
 
 
@@ -461,108 +474,108 @@ struct DBI
 {
     DBI_VS9 vs9;
 
-    unsigned long QueryImplementationVersion() { return vs9.QueryImplementationVersion(); }
-    unsigned long QueryInterfaceVersion() { return vs9.QueryInterfaceVersion(); }
-    int Close() { return vs9.Close(); }
-    int OpenMod(char const *objName,char const *libName,struct Mod * *pmod) { return vs9.OpenMod(objName,libName,pmod); }
-    int AddSec(unsigned short sec,unsigned short flags,long offset,long cbseg) { return vs9.AddSec(sec,flags,offset,cbseg); }
+    unsigned long QueryImplementationVersion() { DBI_VS9 *p = &vs9; return p->QueryImplementationVersion(); }
+    unsigned long QueryInterfaceVersion() { DBI_VS9 *p = &vs9; return p->QueryInterfaceVersion(); }
+    int Close() { DBI_VS9 *p = &vs9; return p->Close(); }
+    int OpenMod(char const *objName,char const *libName,struct Mod * *pmod) { DBI_VS9 *p = &vs9; return p->OpenMod(objName,libName,pmod); }
+    int AddSec(unsigned short sec,unsigned short flags,long offset,long cbseg) { DBI_VS9 *p = &vs9; return p->AddSec(sec,flags,offset,cbseg); }
 
     int AddPublic2(char const *name,unsigned short sec,long off,unsigned long type)
     {
         if(vsVersion >= 10)
             return ((DBI_VS10*) &vs9)->AddPublic2(name, sec, off, type);
-        return vs9.AddPublic2(name, sec, off, type);
+        DBI_VS9 *p = &vs9; return p->AddPublic2(name, sec, off, type);
     }
     void SetMachineType(unsigned short type)
     {
         if(vsVersion >= 10)
             return ((DBI_VS10*) &vs9)->SetMachineType(type);
-        return vs9.SetMachineType(type);
+        DBI_VS9 *p = &vs9; return p->SetMachineType(type);
     }
 };
 
 struct StreamCached {
-public: virtual long StreamCached::QueryCb(void);
-public: virtual int StreamCached::Read(long,void *,long *);
-public: virtual int StreamCached::Write(long,void *,long);
-public: virtual int StreamCached::Replace(void *,long);
-public: virtual int StreamCached::Append(void *,long);
-public: virtual int StreamCached::Delete(void);
-public: virtual int StreamCached::Release(void);
-public: virtual int StreamCached::Read2(long,void *,long);
-public: virtual int StreamCached::Truncate(long);
+public: virtual long QueryCb(void);
+public: virtual int Read(long,void *,long *);
+public: virtual int Write(long,void *,long);
+public: virtual int Replace(void *,long);
+public: virtual int Append(void *,long);
+public: virtual int Delete(void);
+public: virtual int Release(void);
+public: virtual int Read2(long,void *,long);
+public: virtual int Truncate(long);
 };
 
 struct GSI {
-public: virtual unsigned long GSI::QueryInterfaceVersion(void);
-public: virtual unsigned long GSI::QueryImplementationVersion(void);
-public: virtual unsigned char * GSI::NextSym(unsigned char *);
-public: virtual unsigned char * GSI::HashSymW(unsigned short const *,unsigned char *);
-public: virtual unsigned char * GSI2::NearestSym(unsigned short,long,long *);
-public: virtual int GSI::Close(void);
-public: virtual int GSI::getEnumThunk(unsigned short,long,struct EnumThunk * *);
-public: virtual int GSI::QueryTpi(struct TPI * *); // returns 0
-public: virtual int GSI::QueryTpi2(struct TPI * *); // returns 0
-public: virtual unsigned char * GSI2::HashSymW2(unsigned short const *,unsigned char *); // same as GSI2::HashSymW
-public: virtual int GSI::getEnumByAddr(struct EnumSyms * *);
+public: virtual unsigned long QueryInterfaceVersion(void);
+public: virtual unsigned long QueryImplementationVersion(void);
+public: virtual unsigned char * NextSym(unsigned char *);
+public: virtual unsigned char * HashSymW(unsigned short const *,unsigned char *);
+public: virtual unsigned char * NearestSym(unsigned short,long,long *);
+public: virtual int Close(void);
+public: virtual int getEnumThunk(unsigned short,long,struct EnumThunk * *);
+public: virtual int QueryTpi(struct TPI * *); // returns 0
+public: virtual int QueryTpi2(struct TPI * *); // returns 0
+public: virtual unsigned char * HashSymW2(unsigned short const *,unsigned char *); // same as HashSymW
+public: virtual int getEnumByAddr(struct EnumSyms * *);
 };
 
 struct TPI {
-public: virtual unsigned long TPI::QueryInterfaceVersion(void);
-public: virtual unsigned long TPI::QueryImplementationVersion(void);
-public: virtual int TPI::QueryTi16ForCVRecord(unsigned char *,unsigned short *);
-public: virtual int TPI::QueryCVRecordForTi16(unsigned short,unsigned char *,long *);
-public: virtual int TPI::QueryPbCVRecordForTi16(unsigned short,unsigned char * *);
-public: virtual unsigned short TPI::QueryTi16Min(void);
-public: virtual unsigned short TPI::QueryTi16Mac(void);
-public: virtual long TPI::QueryCb(void);
-public: virtual int TPI::Close(void);
-public: virtual int TPI::Commit(void);
-public: virtual int TPI::QueryTi16ForUDT(char const *,int,unsigned short *);
-public: virtual int TPI::SupportQueryTiForUDT(void);
-public: virtual int TPI::fIs16bitTypePool(void);
-public: virtual int TPI::QueryTiForUDT(char const *,int,unsigned long *);
-public: virtual int TPI2::QueryTiForCVRecord(unsigned char *,unsigned long *);
-public: virtual int TPI2::QueryCVRecordForTi(unsigned long,unsigned char *,long *);
-public: virtual int TPI2::QueryPbCVRecordForTi(unsigned long,unsigned char * *);
-public: virtual unsigned long TPI::QueryTiMin(void);
-public: virtual unsigned long TPI::QueryTiMac(void);
-public: virtual int TPI::AreTypesEqual(unsigned long,unsigned long);
-public: virtual int TPI2::IsTypeServed(unsigned long);
-public: virtual int TPI::QueryTiForUDTW(unsigned short const *,int,unsigned long *);
+public: virtual unsigned long QueryInterfaceVersion(void);
+public: virtual unsigned long QueryImplementationVersion(void);
+public: virtual int QueryTi16ForCVRecord(unsigned char *,unsigned short *);
+public: virtual int QueryCVRecordForTi16(unsigned short,unsigned char *,long *);
+public: virtual int QueryPbCVRecordForTi16(unsigned short,unsigned char * *);
+public: virtual unsigned short QueryTi16Min(void);
+public: virtual unsigned short QueryTi16Mac(void);
+public: virtual long QueryCb(void);
+public: virtual int Close(void);
+public: virtual int Commit(void);
+public: virtual int QueryTi16ForUDT(char const *,int,unsigned short *);
+public: virtual int SupportQueryTiForUDT(void);
+public: virtual int fIs16bitTypePool(void);
+public: virtual int QueryTiForUDT(char const *,int,unsigned long *);
+public: virtual int QueryTiForCVRecord(unsigned char *,unsigned long *);
+public: virtual int QueryCVRecordForTi(unsigned long,unsigned char *,long *);
+public: virtual int QueryPbCVRecordForTi(unsigned long,unsigned char * *);
+public: virtual unsigned long QueryTiMin(void);
+public: virtual unsigned long QueryTiMac(void);
+public: virtual int AreTypesEqual(unsigned long,unsigned long);
+public: virtual int IsTypeServed(unsigned long);
+public: virtual int QueryTiForUDTW(unsigned short const *,int,unsigned long *);
 };
 
 
 struct NameMap {
-public: virtual int NameMap::close(void);
-public: virtual int NameMap2::reinitialize(void);
-public: virtual int NameMap2::getNi(char const *,unsigned long *);
-public: virtual int NameMap2::getName(unsigned long,char const * *);
-public: virtual int NameMap2::getEnumNameMap(struct Enum * *);
-public: virtual int NameMap2::contains(char const *,unsigned long *);
-public: virtual int NameMap::commit(void);
-public: virtual int NameMap2::isValidNi(unsigned long);
-public: virtual int NameMap2::getNiW(unsigned short const *,unsigned long *);
-public: virtual int NameMap2::getNameW(unsigned long,unsigned short *,unsigned int *);
-public: virtual int NameMap2::containsW(unsigned short const *,unsigned long *);
-public: virtual int NameMap2::containsUTF8(char const *,unsigned long *);
-public: virtual int NameMap2::getNiUTF8(char const *,unsigned long *);
-public: virtual int NameMap2::getNameA(unsigned long,char const * *);
-public: virtual int NameMap2::getNameW2(unsigned long,unsigned short const * *);
+public: virtual int close(void);
+public: virtual int reinitialize(void);
+public: virtual int getNi(char const *,unsigned long *);
+public: virtual int getName(unsigned long,char const * *);
+public: virtual int getEnumNameMap(struct Enum * *);
+public: virtual int contains(char const *,unsigned long *);
+public: virtual int commit(void);
+public: virtual int isValidNi(unsigned long);
+public: virtual int getNiW(unsigned short const *,unsigned long *);
+public: virtual int getNameW(unsigned long,unsigned short *,unsigned int *);
+public: virtual int containsW(unsigned short const *,unsigned long *);
+public: virtual int containsUTF8(char const *,unsigned long *);
+public: virtual int getNiUTF8(char const *,unsigned long *);
+public: virtual int getNameA(unsigned long,char const * *);
+public: virtual int getNameW2(unsigned long,unsigned short const * *);
 };
 
 struct EnumNameMap {
-public: virtual void EnumNameMap::release(void);
-public: virtual void EnumNameMap::reset(void);
-public: virtual int EnumNameMap::next(void);
-public: virtual void EnumNameMap2::get(char const * *,unsigned long *);
+public: virtual void release(void);
+public: virtual void reset(void);
+public: virtual int next(void);
+public: virtual void get(char const * *,unsigned long *);
 };
 
 struct EnumNameMap_Special {
-public: virtual void EnumNameMap_Special::release(void);
-public: virtual void EnumNameMap_Special::reset(void);
-public: virtual int EnumNameMap_Special::next(void);
-public: virtual void EnumNameMap_Special::get(char const * *,unsigned long *);
+public: virtual void release(void);
+public: virtual void reset(void);
+public: virtual int next(void);
+public: virtual void get(char const * *,unsigned long *);
 };
 
 } // namespace mspdb
diff -pruN cv2pdb-5c63d48.orig/src/symutil.cpp cv2pdb-5c63d48/src/symutil.cpp
--- cv2pdb-5c63d48.orig/src/symutil.cpp	2015-10-08 03:37:41 -0400
+++ cv2pdb-5c63d48/src/symutil.cpp	2016-01-15 10:28:42 -0500
@@ -12,6 +12,9 @@ extern "C" {
 }
 
 #include <assert.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <ctype.h>
 
 char dotReplacementChar = '@';
 bool demangleSymbols = true;
