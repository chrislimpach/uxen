diff -pruN gdb-7.10.1.orig/gdb/remote.c gdb-7.10.1/gdb/remote.c
--- gdb-7.10.1.orig/gdb/remote.c	2015-12-05 15:16:45.000000000 +0000
+++ gdb-7.10.1/gdb/remote.c	2016-01-13 23:57:00.000000000 +0000
@@ -3267,16 +3267,53 @@ remote_close (struct target_ops *self)
 
 /* Query the remote side for the text, data and bss offsets.  */
 
+static int
+get_sect_offset(CORE_ADDR *_addr, char **_ptr, const char *name)
+{
+  char *ptr = *_ptr;
+  CORE_ADDR addr = 0;
+  int i;
+
+  if (strncmp(ptr, name, strlen(name)))
+    return 0;
+
+  ptr += strlen(name);
+
+  i = 0;
+  while (ptr[0] && ptr[0] != ';' && ptr[1] && ptr[1] != ';')
+    {
+      addr |= ((CORE_ADDR)fromhex (ptr[0]) << (i + 4)) |
+        ((CORE_ADDR)fromhex (ptr[1]) << i);
+      i += 8;
+      ptr += 2;
+    }
+
+  if (ptr[0] == ';')
+    ptr++;
+  else if (ptr[0])
+    ptr += 2;
+
+  *_ptr = ptr;
+  *_addr = addr;
+  return 1;
+}
+
 static void
 get_offsets (void)
 {
   struct remote_state *rs = get_remote_state ();
   char *buf;
   char *ptr;
-  int lose, num_segments = 0, do_sections, do_segments;
-  CORE_ADDR text_addr, data_addr, bss_addr, segments[2];
+  int num_segments = 0, do_sections, do_segments;
+  CORE_ADDR *text_addr = NULL, *data_addr = NULL,
+    *bss_addr = NULL, *rdata_addr = NULL;
+  CORE_ADDR text_offset = 0, data_offset = 0, bss_offset = 0, rdata_offset = 0;
+  CORE_ADDR addr, segments[2];
   struct section_offsets *offs;
+  struct obj_section *osect;
+  struct bfd_section *bsect;
   struct symfile_segment_data *data;
+  int i;
 
   if (symfile_objfile == NULL)
     return;
@@ -3294,70 +3331,66 @@ get_offsets (void)
       return;
     }
 
+  offs = ((struct section_offsets *)
+	  alloca (SIZEOF_N_SECTION_OFFSETS (symfile_objfile->num_sections)));
+  memcpy (offs, symfile_objfile->section_offsets,
+	  SIZEOF_N_SECTION_OFFSETS (symfile_objfile->num_sections));
+
+  ALL_OBJFILE_OSECTIONS(symfile_objfile, osect) {
+    bsect = osect->the_bfd_section;
+    if (!strcmp(bsect->name, ".text")) {
+      text_addr = &offs->offsets[bsect->index];
+      text_offset = bfd_get_section_vma(osect->objfile->obfd, bsect);
+    } else if (!strcmp(bsect->name, ".data")) {
+      data_addr = &offs->offsets[bsect->index];
+      data_offset = bfd_get_section_vma(osect->objfile->obfd, bsect);
+    } else if (!strcmp(bsect->name, ".rdata")) {
+      rdata_addr = &offs->offsets[bsect->index];
+      rdata_offset = bfd_get_section_vma(osect->objfile->obfd, bsect);
+    } else if (!strcmp(bsect->name, ".bss")) {
+      bss_addr = &offs->offsets[bsect->index];
+      bss_offset = bfd_get_section_vma(osect->objfile->obfd, bsect);
+    }
+  }
+  segments[0] = segments[1] = 0;
+
   /* Pick up each field in turn.  This used to be done with scanf, but
      scanf will make trouble if CORE_ADDR size doesn't match
      conversion directives correctly.  The following code will work
      with any size of CORE_ADDR.  */
-  text_addr = data_addr = bss_addr = 0;
   ptr = buf;
-  lose = 0;
-
-  if (startswith (ptr, "Text="))
-    {
-      ptr += 5;
-      /* Don't use strtol, could lose on big values.  */
-      while (*ptr && *ptr != ';')
-	text_addr = (text_addr << 4) + fromhex (*ptr++);
-
-      if (startswith (ptr, ";Data="))
-	{
-	  ptr += 6;
-	  while (*ptr && *ptr != ';')
-	    data_addr = (data_addr << 4) + fromhex (*ptr++);
-	}
-      else
-	lose = 1;
-
-      if (!lose && startswith (ptr, ";Bss="))
-	{
-	  ptr += 5;
-	  while (*ptr && *ptr != ';')
-	    bss_addr = (bss_addr << 4) + fromhex (*ptr++);
 
-	  if (bss_addr != data_addr)
-	    warning (_("Target reported unsupported offsets: %s"), buf);
-	}
-      else
-	lose = 1;
+  while (*ptr) {
+    if (text_addr && get_sect_offset(&addr, &ptr, "Text=")) {
+      *text_addr = addr - text_offset;
+      continue;
     }
-  else if (startswith (ptr, "TextSeg="))
-    {
-      ptr += 8;
-      /* Don't use strtol, could lose on big values.  */
-      while (*ptr && *ptr != ';')
-	text_addr = (text_addr << 4) + fromhex (*ptr++);
-      num_segments = 1;
-
-      if (startswith (ptr, ";DataSeg="))
-	{
-	  ptr += 9;
-	  while (*ptr && *ptr != ';')
-	    data_addr = (data_addr << 4) + fromhex (*ptr++);
-	  num_segments++;
-	}
+    if (data_addr && get_sect_offset(&addr, &ptr, "Data=")) {
+      *data_addr = addr - data_offset;
+      continue;
+    }
+    if (bss_addr && get_sect_offset(&addr, &ptr, "Bss=")) {
+      *bss_addr = addr - bss_offset;
+      continue;
+    }
+    if (rdata_addr && get_sect_offset(&addr, &ptr, ".rdata=")) {
+      *rdata_addr = addr - rdata_offset;
+      continue;
+    }
+    if (get_sect_offset(&segments[0], &ptr, "TextSeg=")) {
+      num_segments++;
+      continue;
+    }
+    if (get_sect_offset(&segments[1], &ptr, "DataSeg=")) {
+      num_segments++;
+      continue;
     }
-  else
-    lose = 1;
 
-  if (lose)
-    error (_("Malformed response to offset query, %s"), buf);
-  else if (*ptr != '\0')
-    warning (_("Target reported unsupported offsets: %s"), buf);
+    break;
+  }
 
-  offs = ((struct section_offsets *)
-	  alloca (SIZEOF_N_SECTION_OFFSETS (symfile_objfile->num_sections)));
-  memcpy (offs, symfile_objfile->section_offsets,
-	  SIZEOF_N_SECTION_OFFSETS (symfile_objfile->num_sections));
+  if (*ptr != '\0')
+    warning (_("Target reported unsupported offsets: %s"), buf);
 
   data = get_symfile_segment_data (symfile_objfile->obfd);
   do_segments = (data != NULL);
@@ -3365,8 +3398,8 @@ get_offsets (void)
 
   if (num_segments > 0)
     {
-      segments[0] = text_addr;
-      segments[1] = data_addr;
+      /* segments[0] = text_addr; */
+      /* segments[1] = data_addr; */
     }
   /* If we have two segments, we can still try to relocate everything
      by assuming that the .text and .data offsets apply to the whole
@@ -3374,8 +3407,8 @@ get_offsets (void)
      to base addresses for symfile_map_offsets_to_segments.  */
   else if (data && data->num_segments == 2)
     {
-      segments[0] = data->segment_bases[0] + text_addr;
-      segments[1] = data->segment_bases[1] + data_addr;
+      segments[0] += data->segment_bases[0] /* + text_addr */;
+      segments[1] += data->segment_bases[1] /* + data_addr */;
       num_segments = 2;
     }
   /* If the object file has only one segment, assume that it is text
@@ -3385,7 +3418,9 @@ get_offsets (void)
      the permissions here.  */
   else if (data && data->num_segments == 1)
     {
-      segments[0] = data->segment_bases[0] + text_addr;
+      if (!segments[0] && segments[1])
+	segments[0] = segments[1];
+      segments[0] += data->segment_bases[0] /* + text_addr */;
       num_segments = 1;
     }
   /* There's no way to relocate by segment.  */
@@ -3408,19 +3443,6 @@ get_offsets (void)
   if (data)
     free_symfile_segment_data (data);
 
-  if (do_sections)
-    {
-      offs->offsets[SECT_OFF_TEXT (symfile_objfile)] = text_addr;
-
-      /* This is a temporary kludge to force data and bss to use the
-	 same offsets because that's what nlmconv does now.  The real
-	 solution requires changes to the stub and remote.c that I
-	 don't have time to do right now.  */
-
-      offs->offsets[SECT_OFF_DATA (symfile_objfile)] = data_addr;
-      offs->offsets[SECT_OFF_BSS (symfile_objfile)] = data_addr;
-    }
-
   objfile_relocate (symfile_objfile, offs);
 }
 
