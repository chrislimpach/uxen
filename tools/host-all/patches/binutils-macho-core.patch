diff -pruN binutils-2.25.1.orig/bfd/mach-o.c binutils-2.25.1/bfd/mach-o.c
--- binutils-2.25.1.orig/bfd/mach-o.c	2015-07-21 09:20:58.000000000 +0100
+++ binutils-2.25.1/bfd/mach-o.c	2016-01-13 22:38:07.000000000 +0000
@@ -1146,6 +1146,7 @@ bfd_mach_o_write_thread (bfd *abfd, bfd_
   unsigned int i;
   struct mach_o_thread_command_external raw;
   unsigned int offset;
+  asection *ts;
 
   BFD_ASSERT ((command->type == BFD_MACH_O_LC_THREAD)
 	      || (command->type == BFD_MACH_O_LC_UNIXTHREAD));
@@ -1164,6 +1165,15 @@ bfd_mach_o_write_thread (bfd *abfd, bfd_
           || bfd_bwrite (&raw, sizeof (raw), abfd) != sizeof (raw))
 	return FALSE;
 
+      ts = bfd_get_section_by_name(abfd, "LC_THREAD.x86_THREAD_STATE.0");
+      if (!ts)
+        return FALSE;
+      if (bfd_seek (abfd, command->offset + offset + BFD_MACH_O_LC_SIZE,
+                    SEEK_SET) != 0
+          || bfd_bwrite (ts->contents, cmd->flavours[i].size, abfd) !=
+          cmd->flavours[i].size)
+	return FALSE;
+
       offset += cmd->flavours[i].size + sizeof (raw);
     }
 
@@ -1758,6 +1768,10 @@ bfd_mach_o_write_segment_32 (bfd *abfd, 
       || bfd_bwrite (&raw, sizeof (raw), abfd) != sizeof (raw))
     return FALSE;
 
+  /* Don't write sections in core files -- each segment has one section */
+  if (abfd->format == bfd_core)
+    return TRUE;
+
   for (sec = seg->sect_head; sec != NULL; sec = sec->next)
     if (!bfd_mach_o_write_section_32 (abfd, sec))
       return FALSE;
@@ -1792,6 +1806,10 @@ bfd_mach_o_write_segment_64 (bfd *abfd, 
       || bfd_bwrite (&raw, sizeof (raw), abfd) != sizeof (raw))
     return FALSE;
 
+  /* Don't write sections in core files -- each segment has one section */
+  if (abfd->format == bfd_core)
+    return TRUE;
+
   for (sec = seg->sect_head; sec != NULL; sec = sec->next)
     if (!bfd_mach_o_write_section_64 (abfd, sec))
       return FALSE;
@@ -2403,9 +2421,9 @@ bfd_mach_o_mangle_sections (bfd *abfd, b
       return FALSE;
     }
 
-  mdata->nsects = nsect;
+  mdata->nsects = 0;
   mdata->sections = bfd_alloc2 (abfd,
-				mdata->nsects, sizeof (bfd_mach_o_section *));
+				nsect, sizeof (bfd_mach_o_section *));
   if (mdata->sections == NULL)
     return FALSE;
 
@@ -2418,6 +2436,10 @@ bfd_mach_o_mangle_sections (bfd *abfd, b
       unsigned bfd_align = bfd_get_section_alignment (abfd, sec);
       bfd_mach_o_section *msect = bfd_mach_o_get_mach_o_section (sec);
 
+      if (sec->flags & SEC_LINKER_CREATED)
+        continue;
+      mdata->nsects++;
+
       mdata->sections[target_index] = msect;
 
       msect->addr = bfd_get_section_vma (abfd, sec);
@@ -2501,6 +2523,8 @@ bfd_mach_o_write_contents (bfd *abfd)
       case BFD_MACH_O_LC_LOAD_DYLIB:
       case BFD_MACH_O_LC_LOAD_DYLINKER:
       case BFD_MACH_O_LC_MAIN:
+      case BFD_MACH_O_LC_THREAD:
+      case BFD_MACH_O_LC_UNIXTHREAD:
 	/* Nothing to do.  */
 	break;
       default:
@@ -2869,6 +2893,146 @@ bfd_mach_o_build_exec_seg_command (bfd *
   return TRUE;
 }
 
+static bfd_boolean
+bfd_mach_o_build_core_seg_commands (const char *segment,
+                                    bfd_mach_o_data_struct *mdata,
+                                    int idx)
+{
+  bfd_mach_o_load_command *cmd;
+  bfd_mach_o_segment_command *seg;
+  int is_mho = (segment == NULL || segment[0] == '\0');
+  unsigned int i = 0;
+  (void)idx;
+
+  cmd = mdata->first_command;
+  for (i = 0; i < mdata->nsects; cmd = cmd->next, i++) {
+    seg = &cmd->command.segment;
+
+    /* Fill segment command.  */
+    if (is_mho)
+      memset (seg->segname, 0, sizeof (seg->segname));
+    else
+      strncpy (seg->segname, segment, sizeof (seg->segname));
+
+    do {
+      bfd_mach_o_section *s = mdata->sections[i];
+      asection *sec = s->bfdsection;
+      seg->vmaddr = sec->vma;
+      seg->vmsize = sec->size;
+    } while (0);
+
+    seg->fileoff = mdata->filelen;
+    seg->filesize = 0;
+    seg->maxprot = BFD_MACH_O_PROT_READ | BFD_MACH_O_PROT_WRITE
+      | BFD_MACH_O_PROT_EXECUTE;
+    seg->initprot = seg->maxprot;
+    seg->flags = 0;
+    seg->sect_head = NULL;
+    seg->sect_tail = NULL;
+
+    /*  Append sections to the segment.  
+
+        This is a little tedious, we have to honor the need to account zerofill
+        sections after all the rest.  This forces us to do the calculation of
+        total vmsize in three passes so that any alignment increments are 
+        properly accounted.  */
+
+    do {
+      bfd_mach_o_section *s = mdata->sections[i];
+      asection *sec = s->bfdsection;
+
+      /* If we're not making an MH_OBJECT, check whether this section is from
+	 our segment, and skip if not.  Otherwise, just add all sections.  */
+      if (! is_mho 
+	  && strncmp (segment, s->segname, BFD_MACH_O_SEGNAME_SIZE) != 0)
+	continue;
+
+      /* Although we account for zerofill section sizes in vm order, they are
+	 placed in the file in source sequence.  */
+      bfd_mach_o_append_section_to_segment (seg, s);
+      s->offset = 0;
+      
+      /* Zerofill sections have zero file size & offset, 
+	 and are not written.  */
+      if ((s->flags & BFD_MACH_O_SECTION_TYPE_MASK) == BFD_MACH_O_S_ZEROFILL
+          || (s->flags & BFD_MACH_O_SECTION_TYPE_MASK) 
+	      == BFD_MACH_O_S_GB_ZEROFILL)
+        continue;
+
+      if (s->size > 0)
+        {
+	  seg->vmsize = FILE_ALIGN (seg->vmsize, s->align);
+	  seg->vmsize += s->size;
+
+	  seg->filesize = FILE_ALIGN (seg->filesize, s->align);
+	  seg->filesize += s->size;
+
+          mdata->filelen = FILE_ALIGN (mdata->filelen, s->align);
+          s->offset = mdata->filelen;
+        }
+
+      sec->filepos = s->offset;
+      mdata->filelen += s->size;
+    } while (0);
+
+    /* Now pass through again, for zerofill, only now we just update
+       the vmsize.  */
+    do {
+      bfd_mach_o_section *s = mdata->sections[i];
+
+      if ((s->flags & BFD_MACH_O_SECTION_TYPE_MASK) != BFD_MACH_O_S_ZEROFILL)
+        continue;
+
+      if (! is_mho 
+	  && strncmp (segment, s->segname, BFD_MACH_O_SEGNAME_SIZE) != 0)
+	continue;
+
+      if (s->size > 0)
+	{
+	  seg->vmsize = FILE_ALIGN (seg->vmsize, s->align);
+	  seg->vmsize += s->size;
+	}
+    } while (0);
+
+    /* Now pass through again, for zerofill_GB.  */
+    do {
+      bfd_mach_o_section *s = mdata->sections[i];
+ 
+      if ((s->flags & BFD_MACH_O_SECTION_TYPE_MASK) != BFD_MACH_O_S_GB_ZEROFILL)
+        continue;
+
+      if (! is_mho 
+	  && strncmp (segment, s->segname, BFD_MACH_O_SEGNAME_SIZE) != 0)
+	continue;
+
+      if (s->size > 0)
+	{
+	  seg->vmsize = FILE_ALIGN (seg->vmsize, s->align);
+	  seg->vmsize += s->size;
+	}
+    } while (0);
+
+    /* Allocate space for the relocations.  */
+    mdata->filelen = FILE_ALIGN(mdata->filelen, 2);
+
+    do {
+      bfd_mach_o_section *ms = mdata->sections[i];
+      asection *sec = ms->bfdsection;
+        
+      if ((ms->nreloc = sec->reloc_count) == 0)
+        {
+	  ms->reloff = 0;
+	  continue;
+        }
+      sec->rel_filepos = mdata->filelen;
+      ms->reloff = sec->rel_filepos;
+      mdata->filelen += sec->reloc_count * BFD_MACH_O_RELENT_SIZE;
+    } while (0);
+  }
+
+  return TRUE;
+}
+
 /* Layout the commands: set commands size and offset, set ncmds and sizeofcmds
    fields in header.  */
 
@@ -2932,6 +3096,18 @@ bfd_mach_o_layout_commands (bfd_mach_o_d
 	  cmd->len = sizeof (struct mach_o_dyld_info_command_external)
 		 + BFD_MACH_O_LC_SIZE;
 	  break;
+        case BFD_MACH_O_LC_THREAD:
+        {
+          bfd_mach_o_thread_command *thr = &cmd->command.thread;
+          unsigned int i;
+          /* cmd->len already set */
+          cmd->len = (cmd->len + align) & ~align;
+          for (i = 0; i < thr->nflavours; i++)
+              /* adjust thr->offset for here */
+              thr->flavours[i].offset = cmd->offset +
+                  BFD_MACH_O_LC_SIZE + BFD_MACH_O_LC_SIZE;
+        }
+          break;
 	default:
 	  (*_bfd_error_handler)
 	    (_("unable to layout unknown load command 0x%lx"),
@@ -2993,6 +3169,7 @@ bfd_mach_o_build_commands (bfd *abfd)
   unsigned int nbr_commands;
   int symtab_idx = -1;
   int dysymtab_idx = -1;
+  int thread_idx = -1;
   int main_idx = -1;
   unsigned int i;
 
@@ -3003,7 +3180,9 @@ bfd_mach_o_build_commands (bfd *abfd)
   /* Fill in the file type, if not already set.  */
   if (mdata->header.filetype == 0)
     {
-      if (abfd->flags & EXEC_P)
+      if (abfd->format == bfd_core)
+        mdata->header.filetype = BFD_MACH_O_MH_CORE;
+      else if (abfd->flags & EXEC_P)
         mdata->header.filetype = BFD_MACH_O_MH_EXECUTE;
       else if (abfd->flags & DYNAMIC)
         mdata->header.filetype = BFD_MACH_O_MH_DYLIB;
@@ -3030,6 +3209,10 @@ bfd_mach_o_build_commands (bfd *abfd)
 	 optional if there is no sections.  */
       nbr_segcmd = (mdata->nsects > 0) ? 1 : 0;
     }
+  else if (mdata->header.filetype == BFD_MACH_O_MH_CORE)
+    {
+      nbr_segcmd = mdata->nsects;
+    }
   else
     {
       bfd_mach_o_section *prev_sect = NULL;
@@ -3068,6 +3251,12 @@ bfd_mach_o_build_commands (bfd *abfd)
       dysymtab_idx = nbr_commands++;
     }
 
+  if (mdata->header.filetype == BFD_MACH_O_MH_CORE &&
+      bfd_get_section_by_name(abfd, "LC_THREAD.x86_THREAD_STATE.0"))
+    {
+      thread_idx = nbr_commands++;
+    }
+
   /* Add an entry point command.  */
   if (mdata->header.filetype == BFD_MACH_O_MH_EXECUTE
       && bfd_get_start_address (abfd) != 0)
@@ -3100,7 +3289,7 @@ bfd_mach_o_build_commands (bfd *abfd)
       /* For object file, there is only one segment.  */
       bfd_mach_o_init_segment (mdata, &commands[0], "", mdata->nsects);
     }
-  else if (nbr_segcmd != 0)
+  else if (nbr_segcmd != 0 && mdata->header.filetype != BFD_MACH_O_MH_CORE)
     {
       bfd_mach_o_load_command *cmd;
 
@@ -3131,6 +3320,15 @@ bfd_mach_o_build_commands (bfd *abfd)
       /* The linkedit.  */
       bfd_mach_o_init_segment (mdata, cmd, "__LINKEDIT", 0);
     }
+  else if (nbr_segcmd != 0 && mdata->header.filetype == BFD_MACH_O_MH_CORE)
+    {  
+      for (i = 0; i < mdata->nsects; i++)
+        {
+          bfd_mach_o_load_command *cmd = &commands[i];
+
+          bfd_mach_o_init_segment (mdata, cmd, mdata->sections[i]->segname, 1);
+        }
+    }
 
   if (symtab_idx >= 0)
     {
@@ -3163,6 +3361,28 @@ bfd_mach_o_build_commands (bfd *abfd)
       cmd->command.main.stacksize = 0;
     }
 
+  if (thread_idx >= 0)
+    {  
+      bfd_mach_o_load_command *cmd = &commands[thread_idx];
+      bfd_mach_o_thread_command *thr = &cmd->command.thread;
+      asection *ts;
+
+      ts = bfd_get_section_by_name(abfd, "LC_THREAD.x86_THREAD_STATE.0");
+
+      cmd->type = BFD_MACH_O_LC_THREAD;
+      cmd->len = BFD_MACH_O_LC_SIZE +
+        sizeof(struct mach_o_thread_command_external) +
+        bfd_section_size(abfd, ts);
+
+      thr->nflavours = 1;
+      thr->flavours = bfd_alloc (abfd, 1 * sizeof(bfd_mach_o_thread_flavour));
+      thr->flavours[0].flavour = BFD_MACH_O_x86_THREAD_STATE;
+      // thr->flavours[0].offset = cmd->offset + BFD_MACH_O_LC_SIZE + BFD_MACH_O_LC_SIZE;
+      thr->flavours[0].size = bfd_section_size(abfd, ts);
+
+      cmd->type_required = FALSE;
+    }
+
   /* Layout commands.  */
   if (! bfd_mach_o_layout_commands (mdata))
     return FALSE;
@@ -3176,6 +3396,11 @@ bfd_mach_o_build_commands (bfd *abfd)
 	    (abfd, &commands[i].command.segment))
 	  return FALSE;
     }
+  else if (mdata->header.filetype == BFD_MACH_O_MH_CORE)
+    {
+      if (!bfd_mach_o_build_core_seg_commands(NULL, mdata, 0))
+        return FALSE;
+    }
   else
     {
       bfd_vma maxvma = 0;
